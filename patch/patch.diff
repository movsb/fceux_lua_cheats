diff -r src/boards/datalatch.cpp src-orig/boards/datalatch.cpp
31c31
< 	FCEU_printf("bs %04x %02x\n",A,V);
---
> //	FCEU_printf("bs %04x %02x\n",A,V);
36,37d35
< 	
< 	//latche^=1;
diff -r src/cart.cpp src-orig/cart.cpp
111c111
<  void SetupCartPRGMapping(int chip, uint8 *p, uint32 size, int ram) {
---
> void SetupCartPRGMapping(int chip, uint8 *p, uint32 size, int ram) {
diff -r src/config.cpp src-orig/config.cpp
19c19
< 		FCEU_NAME_AND_VERSION "(Cheats New Version)" "\n\n"
---
> 		FCEU_NAME_AND_VERSION "\n\n"
43d42
< 		"Е®єўІ»їЮ FCEUXЅрКЦЦё°ж\n"
Only in src/drivers/win: CheatInterface.cpp
Only in src/drivers/win: CheatInterface.h
diff -r src/drivers/win/main.cpp src-orig/drivers/win/main.cpp
450,452d449
< 		extern void CloseDatabaseManager();
< 		CloseDatabaseManager();
< 
Only in src/drivers/win: mymain.cpp
Only in src/drivers/win: res.aps
diff -r src/drivers/win/res.rc src-orig/drivers/win/res.rc
10c10,11
< #include "afxres.h"
---
> #include "afxres.h"
> 
15c16
< // Neutral resources
---
> // Нейтральны?resources
206d206
<         MENUITEM "Database Manager...",         ID_TOOLS_DATABASEMANAGER
221d220
<         MENUITEM "Cheats New",                  MENU_CHEATSNEW
2157c2156
< #endif    // Neutral resources
---
> #endif    // Нейтральны?resources
2162c2161
< // Russian (Russia) resources
---
> // Русски?(Росс?) resources
2166c2165
< #pragma code_page(1251)
---
> #pragma code_page(936)
2237c2236
< #endif    // Russian (Russia) resources
---
> #endif    // Русски?(Росс?) resources
2242c2241
< // English (United States) resources
---
> // Английский (СШ? resources
2246c2245
< #pragma code_page(1252)
---
> #pragma code_page(936)
2476c2475
< #endif    // English (United States) resources
---
> #endif    // Английский (СШ? resources
2486c2485,2486
< 
---
> 
> 
diff -r src/drivers/win/resource.h src-orig/drivers/win/resource.h
1204,1206d1203
< #define ID_TOOLS_DATABASEMANAGER        40589
< #define ID_HELP_CHEATSNEW               40590
< #define MENU_CHEATSNEW                  40591
1219c1216
< #define _APS_NEXT_COMMAND_VALUE         40592
---
> #define _APS_NEXT_COMMAND_VALUE         40589
diff -r src/drivers/win/window.cpp src-orig/drivers/win/window.cpp
74,75d73
< #include "CheatInterface.h"
< 
89,101d86
< #include "..\\..\\ndb\\ndb\\src\\win\\MainWindow.h"
< 
< AMainWindow* ndbWin;
< 
< AMainWindow* GetNdb()
< {
< 	if(!ndbWin) ndbWin=new AMainWindow;
< 	return ndbWin;
< }
< void SetNdb(AMainWindow* p)
< {
< 	ndbWin = p;
< }
103,112d87
< void CloseDatabaseManager()
< {
< 	AMainWindow* p = ndbWin;
< 	if(p){
< 		p->SaveAllCheatFiles();
< 		p->DestroyWindow();
< 		delete p;
< 		SetNdb(0);
< 	}
< }
1052d1026
< AMainWindow* pmw;
1055,1067d1028
< // 	{
< // 		std::string name = nameo;
< // 		if(name.find(".ndb")==name.size()-4){
< // // 			if(!pmw) pmw = new AMainWindow;
< // // 			pmw->OpenDatabaseTmp(nameo);
< // //			GetNdb()->OpenDatabaseTmp(nameo);
< // 			if(!IsWindowVisible(GetNdb()->GetHwnd())){
< // 				GetNdb()->ShowWindow(SW_SHOWNORMAL);
< // 			}
< // 			return false;
< // 		}
< // 	}
< 
1131c1092
< 	const char filter[] = "All usable files (*.ndb,*.nes,*.nsf,*.fds,*.unf,*.zip,*.rar,*.7z,*.gz)\0*.ndb;*.nes;*.nsf;*.fds;*.unf;*.zip;*.rar;*.7z;*.gz\0All non-compressed usable files (*.nes,*.nsf,*.fds,*.unf)\0*.nes;*.nsf;*.fds;*.unf\0All Files (*.*)\0*.*\0\0";
---
> 	const char filter[] = "All usable files (*.nes,*.nsf,*.fds,*.unf,*.zip,*.rar,*.7z,*.gz)\0*.nes;*.nsf;*.fds;*.unf;*.zip;*.rar;*.7z;*.gz\0All non-compressed usable files (*.nes,*.nsf,*.fds,*.unf)\0*.nes;*.nsf;*.fds;*.unf\0All Files (*.*)\0*.*\0\0";
1311,1335d1271
< // 	case WM_APP+100:
< // 		{
< // #include "C:\\Users\\YangTao\\Desktop\\ndb\\ndb\\src\\win\\SharedMemory.h"
< // 			HANDLE hmap = OpenFileMapping(FILE_MAP_ALL_ACCESS,FALSE,NDB_NAME);
< // 			if(hmap){
< // 				void* pv = MapViewOfFile(hmap,FILE_MAP_ALL_ACCESS,0,0,(1<<20)*5);
< // 				if(pv){
< // 					NDB_ShareMemory* nsh = (NDB_ShareMemory*)pv;
< // 					if(nsh->uMsg == NSMM_LOADGAME){
< // 						NSM_LOADGAME* plg = (NSM_LOADGAME*)nsh;
< // 						string str="shared://";
< // 						str = plg->fname;
< // 						//str += "\0\0\0\0\0\0\0\0\0";
< // 						for(int i=9;i>0; i--) str += '\0';
< // 						void**p = (void**)((char*)str.c_str()+str.size()-8);
< // 						p[0] = plg->data;
< // 						p[1] = (void*)plg->size;
< // 						ALoad(str.c_str());
< // 					}
< // 				}
< // 				CloseHandle(hmap);
< // 			}
< // 			return 0;
< // 		}
< 
1519,1523c1455
< 				char mbs[1024]={0};
< 				WideCharToMultiByte(CP_ACP,0,wftmp,len,mbs,1024,0,0);
< 
< 				//std::string fileDropped = wcstombs(wftmp);
< 				std::string fileDropped = mbs;
---
> 				std::string fileDropped = wcstombs(wftmp);
2217,2221d2148
< 			case ID_TOOLS_DATABASEMANAGER:
< 				{
< 					GetNdb()->ShowWindow(SW_SHOWNORMAL);
< 					break;
< 				}
2250,2252d2176
< 			case MENU_CHEATSNEW:
< 				ShellExecute(0,"open","cheats_new.txt",0,BaseDirectory.c_str(),SW_SHOWNORMAL);
< 				break;
2432,2453d2355
< 	case CI_WRITEMEMORY:
< 		chti_WriteMemory(wParam,lParam);
< 		break;
< 	case CI_LOCKMEMORY:
< 		chti_LockMemory(wParam,lParam);
< 		break;
< 	case CI_UNLOCKMEMORY:
< 		chti_UnlockMemory(wParam);
< 		break;
< 	case CI_PAUSEEMU:
< 		//EmulationPaused = wParam!=0;
< 		if(wParam==-1) return EmulationPaused;
< 		else {
< 			int oldpaused = EmulationPaused;
< 			EmulationPaused = wParam!=0;
< 			return oldpaused;
< 		}
< 		break;
< 	case CI_READMEMORY:
< 		return chti_ReadMemory(wParam);
< 
< 
2662d2563
< 	ImmAssociateContext(hAppWnd,0);
diff -r src/fceu.cpp src-orig/fceu.cpp
352d351
< 	printf("A:%04X,%02X\n",A,V);
diff -r src/file.cpp src-orig/file.cpp
264,286d263
< 	//Е®єўІ»їЮ2014-01-26
< 	//if(strcmp(path,"shared://<name>\0<data_ptr><size_ptr>"))
< 	if(memcmp(path,"shared://",9) == 0){
< 		void* ptr = (void*)(path + strlen(path) + 1);
< 		void* data = *(void**)ptr;
< 		size_t size = *(size_t*)((char*)ptr+sizeof(void*));
< 
< 		EMUFILE_MEMORY* ems = new EMUFILE_MEMORY(size);
< 		memcpy(ems->buf(),data,size);
< 
< 		fceufp = new FCEUFILE();
< 		fceufp->archiveCount=0;
< 		fceufp->archiveFilename = "";
< 		fceufp->archiveIndex=-1;
< 		fceufp->filename = path;
< 		fceufp->fullFilename = path;
< 		fceufp->logicalPath = path;
< 		fceufp->stream = ems;
< 		fceufp->size = size;
< 
< 		return fceufp;
< 	}
< 
diff -r src/utils/xstring.cpp src-orig/utils/xstring.cpp
29c29
<     unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
---
> 	unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
31,38c31,38
<     while (i < strlen(str)) {
<         if ((str[i] >= 'a') && (str[i] <= 'z')) {
<             str[i] &= ~0x20;
<             j++;
<         }
<         i++;
<     }
<     return j;
---
> 	while (i < strlen(str)) {
> 		if ((str[i] >= 'a') && (str[i] <= 'z')) {
> 			str[i] &= ~0x20;
> 			j++;
> 		}
> 		i++;
> 	}
> 	return j;
44c44
<     unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
---
> 	unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
46,53c46,53
<     while (i < strlen(str)) {
<         if ((str[i] >= 'A') && (str[i] <= 'Z')) {
<             str[i] |= 0x20;
<             j++;
<         }
<         i++;
<     }
<     return j;
---
> 	while (i < strlen(str)) {
> 		if ((str[i] >= 'A') && (str[i] <= 'Z')) {
> 			str[i] |= 0x20;
> 			j++;
> 		}
> 		i++;
> 	}
> 	return j;
62c62
<     unsigned int i=0; //mbg merge 7/17/06 changed to unsigned int
---
> 	unsigned int i=0; //mbg merge 7/17/06 changed to unsigned int
64,80c64,80
<     while (str[0]) {
<         if ((flags & STRIP_SP) && (str[0] == ' ')) {
<             i++;
<             strcpy(str,str+1);
<         } else if ((flags & STRIP_TAB) && (str[0] == '\t')) {
<             i++;
<             strcpy(str,str+1);
<         } else if ((flags & STRIP_CR) && (str[0] == '\r')) {
<             i++;
<             strcpy(str,str+1);
<         } else if ((flags & STRIP_LF) && (str[0] == '\n')) {
<             i++;
<             strcpy(str,str+1);
<         } else
<             break;
<     }
<     return i;
---
> 	while (str[0]) {
> 		if ((flags & STRIP_SP) && (str[0] == ' ')) {
> 			i++;
> 			strcpy(str,str+1);
> 		} else if ((flags & STRIP_TAB) && (str[0] == '\t')) {
> 			i++;
> 			strcpy(str,str+1);
> 		} else if ((flags & STRIP_CR) && (str[0] == '\r')) {
> 			i++;
> 			strcpy(str,str+1);
> 		} else if ((flags & STRIP_LF) && (str[0] == '\n')) {
> 			i++;
> 			strcpy(str,str+1);
> 		} else
> 			break;
> 	}
> 	return i;
89c89
<     unsigned int i=0, strl; //mbg merge 7/17/06 changed to unsigned int
---
> 	unsigned int i=0, strl; //mbg merge 7/17/06 changed to unsigned int
91,107c91,107
<     while (strl = strlen(str)) {
<         if ((flags & STRIP_SP) && (str[0] == ' ')) {
<             i++;
<             str[strl] = 0;
<         } else if ((flags & STRIP_TAB) && (str[0] == '\t')) {
<             i++;
<             str[strl] = 0;
<         } else if ((flags & STRIP_CR) && (str[0] == '\r')) {
<             i++;
<             str[strl] = 0;
<         } else if ((flags & STRIP_LF) && (str[0] == '\n')) {
<             i++;
<             str[strl] = 0;
<         } else
<             break;
<     }
<     return i;
---
> 	while (strl = strlen(str)) {
> 		if ((flags & STRIP_SP) && (str[0] == ' ')) {
> 			i++;
> 			str[strl] = 0;
> 		} else if ((flags & STRIP_TAB) && (str[0] == '\t')) {
> 			i++;
> 			str[strl] = 0;
> 		} else if ((flags & STRIP_CR) && (str[0] == '\r')) {
> 			i++;
> 			str[strl] = 0;
> 		} else if ((flags & STRIP_LF) && (str[0] == '\n')) {
> 			i++;
> 			str[strl] = 0;
> 		} else
> 			break;
> 	}
> 	return i;
116,117c116,117
<     unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
<     char *astr,chr;
---
> 	unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
> 	char *astr,chr;
119,134c119,134
<     if (!strlen(str)) return -1;
<     if (!(flags & (STRIP_SP|STRIP_TAB|STRIP_CR|STRIP_LF))) return -1;
<     if (!(astr = (char*)malloc(strlen(str)+1))) return -1;
<     while (i < strlen(str)) {
<         chr = str[i++];
<         if ((flags & STRIP_SP) && (chr == ' ')) chr = 0;
<         if ((flags & STRIP_TAB) && (chr == '\t')) chr = 0;
<         if ((flags & STRIP_CR) && (chr == '\r')) chr = 0;
<         if ((flags & STRIP_LF) && (chr == '\n')) chr = 0;
< 
<         if (chr) astr[j++] = chr;
<     }
<     astr[j] = 0;
<     strcpy(str,astr);
<     free(astr);
<     return j;
---
> 	if (!strlen(str)) return -1;
> 	if (!(flags & (STRIP_SP|STRIP_TAB|STRIP_CR|STRIP_LF))) return -1;
> 	if (!(astr = (char*)malloc(strlen(str)+1))) return -1;
> 	while (i < strlen(str)) {
> 		chr = str[i++];
> 		if ((flags & STRIP_SP) && (chr == ' ')) chr = 0;
> 		if ((flags & STRIP_TAB) && (chr == '\t')) chr = 0;
> 		if ((flags & STRIP_CR) && (chr == '\r')) chr = 0;
> 		if ((flags & STRIP_LF) && (chr == '\n')) chr = 0;
> 
> 		if (chr) astr[j++] = chr;
> 	}
> 	astr[j] = 0;
> 	strcpy(str,astr);
> 	free(astr);
> 	return j;
143c143
<     unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
---
> 	unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
145,152c145,152
<     while (i < strlen(str)) {
<         if (str[i] == search) {
<             str[i] = replace;
<             j++;
<         }
<         i++;
<     }
<     return j;
---
> 	while (i < strlen(str)) {
> 		if (str[i] == search) {
> 			str[i] = replace;
> 			j++;
> 		}
> 		i++;
> 	}
> 	return j;
161,180c161,180
<     unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
<     int searchlen,replacelen;
<     char *astr;
< 
<     searchlen = strlen(search);
<     replacelen = strlen(replace);
<     if ((!strlen(str)) || (!searchlen)) return -1; //note: allow *replace to have a length of zero!
<     if (!(astr = (char*)malloc(strlen(str)+1))) return -1;
<     while (i < strlen(str)) {
<         if (!strncmp(str+i,search,searchlen)) {
<             if (replacelen) memcpy(astr+j,replace,replacelen);
<             i += searchlen;
<             j += replacelen;
<         }
<         else astr[j++] = str[i++];
<     }
<     astr[j] = 0;
<     strcpy(str,astr);
<     free(astr);
<     return j;
---
> 	unsigned int i=0,j=0; //mbg merge 7/17/06 changed to unsigned int
> 	int searchlen,replacelen;
> 	char *astr;
> 
> 	searchlen = strlen(search);
> 	replacelen = strlen(replace);
> 	if ((!strlen(str)) || (!searchlen)) return -1; //note: allow *replace to have a length of zero!
> 	if (!(astr = (char*)malloc(strlen(str)+1))) return -1;
> 	while (i < strlen(str)) {
> 		if (!strncmp(str+i,search,searchlen)) {
> 			if (replacelen) memcpy(astr+j,replace,replacelen);
> 			i += searchlen;
> 			j += replacelen;
> 		}
> 		else astr[j++] = str[i++];
> 	}
> 	astr[j] = 0;
> 	strcpy(str,astr);
> 	free(astr);
> 	return j;
185,200c185,200
<     Base64Table()
<     {
<         size_t a=0;
<         for(a=0; a<256; ++a) data[a] = 0xFF; // mark everything as invalid by default
<         // create value->ascii mapping
<         a=0;
<         for(unsigned char c='A'; c<='Z'; ++c) data[a++] = c; // 0..25
<         for(unsigned char c='a'; c<='z'; ++c) data[a++] = c; // 26..51
<         for(unsigned char c='0'; c<='9'; ++c) data[a++] = c; // 52..61
<         data[62] = '+';                             // 62
<         data[63] = '/';                             // 63
<         // create ascii->value mapping (but due to overlap, write it to highbit region)
<         for(a=0; a<64; ++a) data[data[a]^0x80] = a; // 
<         data[((unsigned char)'=') ^ 0x80] = 0;
<     }
<     unsigned char operator[] (size_t pos) const { return data[pos]; }
---
> 	Base64Table()
> 	{
> 		size_t a=0;
> 		for(a=0; a<256; ++a) data[a] = 0xFF; // mark everything as invalid by default
> 		// create value->ascii mapping
> 		a=0;
> 		for(unsigned char c='A'; c<='Z'; ++c) data[a++] = c; // 0..25
> 		for(unsigned char c='a'; c<='z'; ++c) data[a++] = c; // 26..51
> 		for(unsigned char c='0'; c<='9'; ++c) data[a++] = c; // 52..61
> 		data[62] = '+';                             // 62
> 		data[63] = '/';                             // 63
> 		// create ascii->value mapping (but due to overlap, write it to highbit region)
> 		for(a=0; a<64; ++a) data[data[a]^0x80] = a; // 
> 		data[((unsigned char)'=') ^ 0x80] = 0;
> 	}
> 	unsigned char operator[] (size_t pos) const { return data[pos]; }
202c202
<     unsigned char data[256];
---
> 	unsigned char data[256];
208,257c208,257
<     char temp[16];
<     if(len==1) {
<         sprintf(temp,"%d",*(const unsigned char*)data);
<         return temp;
<     } else if(len==2) {
<         sprintf(temp,"%d",*(const unsigned short*)data);
<         return temp;
<     } else if(len==4) {
<         sprintf(temp,"%d",*(const unsigned int*)data);
<         return temp;		
<     }
<     
<     std::string ret;
<     if(1) // use base64
<     {
<         const unsigned char* src = (const unsigned char*)data;
<         ret = "base64:";
<         for(int n; len > 0; len -= n)
<         {
<             unsigned char input[3] = {0,0,0};
<             for(n=0; n<3 && n<len; ++n)
<                 input[n] = *src++;
<             unsigned char output[4] =
<             {
<                 Base64Table[ input[0] >> 2 ],
<                 Base64Table[ ((input[0] & 0x03) << 4) | (input[1] >> 4) ],
<                 n<2 ? '=' : Base64Table[ ((input[1] & 0x0F) << 2) | (input[2] >> 6) ],
<                 n<3 ? '=' : Base64Table[ input[2] & 0x3F ]
<             };
<             ret.append(output, output+4);
<         }
<     }
<     else // use hex
<     {
<         ret.resize(len*2+2);
<         ret[0] = '0';
<         ret[1] = 'x';
<         for(int i=0;i<len;i++)
<         {
<             int a = (((const unsigned char*)data)[i]>>4);
<             int b = (((const unsigned char*)data)[i])&15;
<             if(a>9) a += 'A'-10;
<             else a += '0';
<             if(b>9) b += 'A'-10;
<             else b += '0';
<             ret[2+i*2] = a;
<             ret[2+i*2+1] = b;
<         }
<     }
<     return ret;
---
> 	char temp[16];
> 	if(len==1) {
> 		sprintf(temp,"%d",*(const unsigned char*)data);
> 		return temp;
> 	} else if(len==2) {
> 		sprintf(temp,"%d",*(const unsigned short*)data);
> 		return temp;
> 	} else if(len==4) {
> 		sprintf(temp,"%d",*(const unsigned int*)data);
> 		return temp;		
> 	}
> 	
> 	std::string ret;
> 	if(1) // use base64
> 	{
> 		const unsigned char* src = (const unsigned char*)data;
> 		ret = "base64:";
> 		for(int n; len > 0; len -= n)
> 		{
> 			unsigned char input[3] = {0,0,0};
> 			for(n=0; n<3 && n<len; ++n)
> 				input[n] = *src++;
> 			unsigned char output[4] =
> 			{
> 				Base64Table[ input[0] >> 2 ],
> 				Base64Table[ ((input[0] & 0x03) << 4) | (input[1] >> 4) ],
> 				n<2 ? '=' : Base64Table[ ((input[1] & 0x0F) << 2) | (input[2] >> 6) ],
> 				n<3 ? '=' : Base64Table[ input[2] & 0x3F ]
> 			};
> 			ret.append(output, output+4);
> 		}
> 	}
> 	else // use hex
> 	{
> 		ret.resize(len*2+2);
> 		ret[0] = '0';
> 		ret[1] = 'x';
> 		for(int i=0;i<len;i++)
> 		{
> 			int a = (((const unsigned char*)data)[i]>>4);
> 			int b = (((const unsigned char*)data)[i])&15;
> 			if(a>9) a += 'A'-10;
> 			else a += '0';
> 			if(b>9) b += 'A'-10;
> 			else b += '0';
> 			ret[2+i*2] = a;
> 			ret[2+i*2+1] = b;
> 		}
> 	}
> 	return ret;
263,265c263,265
<     if(str.size()>2 && str[0] == '0' && toupper(str[1]) == 'X')
<         return str.size()/2-1;
<     else return -1;
---
> 	if(str.size()>2 && str[0] == '0' && toupper(str[1]) == 'X')
> 		return str.size()/2-1;
> 	else return -1;
270,275c270,275
<     if(str.size() < 7 || (str.size()-7) % 4 || str.substr(0,7) != "base64:") return -1;
<     
<     size_t c = ((str.size() - 7) / 4) * 3;
<     if(str[str.size()-1] == '=') { --c;
<     if(str[str.size()-2] == '=') --c; }
<     return c;
---
> 	if(str.size() < 7 || (str.size()-7) % 4 || str.substr(0,7) != "base64:") return -1;
> 	
> 	size_t c = ((str.size() - 7) / 4) * 3;
> 	if(str[str.size()-1] == '=') { --c;
> 	if(str[str.size()-2] == '=') --c; }
> 	return c;
282,346c282,346
<     if(str.substr(0,7) == "base64:")
<     {
<         // base64
<         unsigned char* tgt = (unsigned char*)data;
<         for(size_t pos = 7; pos < str.size() && len > 0; )
<         {
<             unsigned char input[4], converted[4];
<             for(int i=0; i<4; ++i)
<             {
<                 if(pos >= str.size() && i > 0) return false; // invalid data
<                 input[i]	 = str[pos++];
<                 if(input[i] & 0x80) return false;	  // illegal character
<                 converted[i] = Base64Table[input[i]^0x80];
<                 if(converted[i] & 0x80) return false; // illegal character
<             }
<             unsigned char outpacket[3] =
<             {
<                 (converted[0] << 2) | (converted[1] >> 4),
<                 (converted[1] << 4) | (converted[2] >> 2),
<                 (converted[2] << 6) | (converted[3])
<             };
<             int outlen = (input[2] == '=') ? 1 : (input[3] == '=' ? 2 : 3);
<             if(outlen > len) outlen = len;
<             memcpy(tgt, outpacket, outlen);
<             tgt += outlen;
<             len -= outlen;
<         }
<         return true;
<     }
<     if(str.size()>2 && str[0] == '0' && toupper(str[1]) == 'X')
<     {
<         // hex
<         int amt = len;
<         int bytesAvailable = str.size()/2;
<         if(bytesAvailable < amt)
<             amt = bytesAvailable;
<         const char* cstr = str.c_str()+2;
<         for(int i=0;i<amt;i++) {
<             char a = toupper(cstr[i*2]);
<             char b = toupper(cstr[i*2+1]);
<             if(a>='A') a=a-'A'+10;
<             else a-='0';
<             if(b>='A') b=b-'A'+10;
<             else b-='0';
<             unsigned char val = ((unsigned char)a<<4)|(unsigned char)b; 
<             ((unsigned char*)data)[i] = val;
<         }
<         return true;
<     }
<     
<     if(len==1) {
<         int x = atoi(str.c_str());
<         *(unsigned char*)data = x;
<         return true;
<     } else if(len==2) {
<         int x = atoi(str.c_str());
<         *(unsigned short*)data = x;
<         return true;
<     } else if(len==4) {
<         int x = atoi(str.c_str());
<         *(unsigned int*)data = x;
<         return true;
<     }
<     //we can't handle it
<     return false;
---
> 	if(str.substr(0,7) == "base64:")
> 	{
> 		// base64
> 		unsigned char* tgt = (unsigned char*)data;
> 		for(size_t pos = 7; pos < str.size() && len > 0; )
> 		{
> 			unsigned char input[4], converted[4];
> 			for(int i=0; i<4; ++i)
> 			{
> 				if(pos >= str.size() && i > 0) return false; // invalid data
> 				input[i]	 = str[pos++];
> 				if(input[i] & 0x80) return false;	  // illegal character
> 				converted[i] = Base64Table[input[i]^0x80];
> 				if(converted[i] & 0x80) return false; // illegal character
> 			}
> 			unsigned char outpacket[3] =
> 			{
> 				(converted[0] << 2) | (converted[1] >> 4),
> 				(converted[1] << 4) | (converted[2] >> 2),
> 				(converted[2] << 6) | (converted[3])
> 			};
> 			int outlen = (input[2] == '=') ? 1 : (input[3] == '=' ? 2 : 3);
> 			if(outlen > len) outlen = len;
> 			memcpy(tgt, outpacket, outlen);
> 			tgt += outlen;
> 			len -= outlen;
> 		}
> 		return true;
> 	}
> 	if(str.size()>2 && str[0] == '0' && toupper(str[1]) == 'X')
> 	{
> 		// hex
> 		int amt = len;
> 		int bytesAvailable = str.size()/2;
> 		if(bytesAvailable < amt)
> 			amt = bytesAvailable;
> 		const char* cstr = str.c_str()+2;
> 		for(int i=0;i<amt;i++) {
> 			char a = toupper(cstr[i*2]);
> 			char b = toupper(cstr[i*2+1]);
> 			if(a>='A') a=a-'A'+10;
> 			else a-='0';
> 			if(b>='A') b=b-'A'+10;
> 			else b-='0';
> 			unsigned char val = ((unsigned char)a<<4)|(unsigned char)b; 
> 			((unsigned char*)data)[i] = val;
> 		}
> 		return true;
> 	}
> 	
> 	if(len==1) {
> 		int x = atoi(str.c_str());
> 		*(unsigned char*)data = x;
> 		return true;
> 	} else if(len==2) {
> 		int x = atoi(str.c_str());
> 		*(unsigned short*)data = x;
> 		return true;
> 	} else if(len==4) {
> 		int x = atoi(str.c_str());
> 		*(unsigned int*)data = x;
> 		return true;
> 	}
> 	//we can't handle it
> 	return false;
389,390c389,390
<     const char* p;	 /* search pointer */
<     const char* s;	 /* copy pointer */
---
> 	const char* p;	 /* search pointer */
> 	const char* s;	 /* copy pointer */
392,411c392,437
<     /* extract drive name */
<     if (path[0] && path[1]==':') {
<         if (drv) {
<             *drv++ = *path++;
<             *drv++ = *path++;
<             *drv = '\0';
<         } else path+=2;
<     } else if (drv)
<         *drv = '\0';
< 
<     /* search for end of string or stream separator */
<     for(end=path; *end && *end!=':'; )
<         end++;
< 
<     /* search for begin of file extension */
<     for(p=end; p>path && *--p!='\\' && *p!='/'; )
<         if (*p == '.') {
<             end = p;
<             break;
<         }
---
> 	/* extract drive name */
> 	if (path[0] && path[1]==':') {
> 		if (drv) {
> 			*drv++ = *path++;
> 			*drv++ = *path++;
> 			*drv = '\0';
> 		} else path+=2;
> 	} else if (drv)
> 		*drv = '\0';
> 
> 	/* search for end of string or stream separator */
> 	for(end=path; *end && *end!=':'; )
> 		end++;
> 
> 	/* search for begin of file extension */
> 	for(p=end; p>path && *--p!='\\' && *p!='/'; )
> 		if (*p == '.') {
> 			end = p;
> 			break;
> 		}
> 
> 	if (ext)
> 		for(s=end; (*ext=*s++); )
> 			ext++;
> 	else
> 		for(s=end; *s++; ) {}
> 
> 	/* search for end of directory name */
> 	for(p=end; p>path; )
> 		if (*--p=='\\' || *p=='/') {
> 			p++;
> 			break;
> 		}
> 
> 	if (name) {
> 		for(s=p; s<end; )
> 			*name++ = *s++;
> 
> 		*name = '\0';
> 	} else
> 		for(s=p; s<end; )
> 			s++;
> 
> 	if (dir) {
> 		for(s=path; s<p; )
> 			*dir++ = *s++;
413,440c439,440
<     if (ext)
<         for(s=end; (*ext=*s++); )
<             ext++;
<     else
<         for(s=end; *s++; ) {}
< 
<     /* search for end of directory name */
<     for(p=end; p>path; )
<         if (*--p=='\\' || *p=='/') {
<             p++;
<             break;
<         }
< 
<     if (name) {
<         for(s=p; s<end; )
<             *name++ = *s++;
< 
<         *name = '\0';
<     } else
<         for(s=p; s<end; )
<             s++;
< 
<     if (dir) {
<         for(s=path; s<p; )
<             *dir++ = *s++;
< 
<         *dir = '\0';
<     }
---
> 		*dir = '\0';
> 	}
451,476c451,476
<     int i;
<     uint16 v=0;
<     for(i=0; i < 4; i++)
<     {
<         if(s[i] == 0) return v;
<         v<<=4;
<         if(s[i] >= '0' && s[i] <= '9')
<         {
<             v+=s[i]-'0';
<         }
<         else if(s[i] >= 'a' && s[i] <= 'f')
<         {
<             v+=s[i]-'a'+10;
<         }
<         else if(s[i] >= 'A' && s[i] <= 'F')
<         {
<             v+=s[i]-'A'+10;
<         }
<         else
<         {
<             valid = false;
<             return 0xFFFF;
<         }
<     }
<     valid = true;
<     return v;
---
> 	int i;
> 	uint16 v=0;
> 	for(i=0; i < 4; i++)
> 	{
> 		if(s[i] == 0) return v;
> 		v<<=4;
> 		if(s[i] >= '0' && s[i] <= '9')
> 		{
> 			v+=s[i]-'0';
> 		}
> 		else if(s[i] >= 'a' && s[i] <= 'f')
> 		{
> 			v+=s[i]-'a'+10;
> 		}
> 		else if(s[i] >= 'A' && s[i] <= 'F')
> 		{
> 			v+=s[i]-'A'+10;
> 		}
> 		else
> 		{
> 			valid = false;
> 			return 0xFFFF;
> 		}
> 	}
> 	valid = true;
> 	return v;
481,485c481,485
<     TempArray[0] = '0' + a/100;
<     TempArray[1] = '0' + (a%100)/10;
<     TempArray[2] = '0' + (a%10);
<     TempArray[3] = 0;
<     return TempArray;
---
> 	TempArray[0] = '0' + a/100;
> 	TempArray[1] = '0' + (a%100)/10;
> 	TempArray[2] = '0' + (a%10);
> 	TempArray[3] = 0;
> 	return TempArray;
490,496c490,496
<     TempArray[0] = '0' + a/10000;
<     TempArray[1] = '0' + (a%10000)/1000;
<     TempArray[2] = '0' + (a%1000)/100;
<     TempArray[3] = '0' + (a%100)/10;
<     TempArray[4] = '0' + (a%10);
<     TempArray[5] = 0;
<     return TempArray;
---
> 	TempArray[0] = '0' + a/10000;
> 	TempArray[1] = '0' + (a%10000)/1000;
> 	TempArray[2] = '0' + (a%1000)/100;
> 	TempArray[3] = '0' + (a%100)/10;
> 	TempArray[4] = '0' + (a%10);
> 	TempArray[5] = 0;
> 	return TempArray;
501,512c501,512
<     buf[0] = '0' + a/1000000000;
<     buf[1] = '0' + (a%1000000000)/100000000;
<     buf[2] = '0' + (a%100000000)/10000000;
<     buf[3] = '0' + (a%10000000)/1000000;
<     buf[4] = '0' + (a%1000000)/100000;
<     buf[5] = '0' + (a%100000)/10000;
<     buf[6] = '0' + (a%10000)/1000;
<     buf[7] = '0' + (a%1000)/100;
<     buf[8] = '0' + (a%100)/10;
<     buf[9] = '0' + (a%10);
<     buf[10] = 0;
<     return buf;
---
> 	buf[0] = '0' + a/1000000000;
> 	buf[1] = '0' + (a%1000000000)/100000000;
> 	buf[2] = '0' + (a%100000000)/10000000;
> 	buf[3] = '0' + (a%10000000)/1000000;
> 	buf[4] = '0' + (a%1000000)/100000;
> 	buf[5] = '0' + (a%100000)/10000;
> 	buf[6] = '0' + (a%10000)/1000;
> 	buf[7] = '0' + (a%1000)/100;
> 	buf[8] = '0' + (a%100)/10;
> 	buf[9] = '0' + (a%10);
> 	buf[10] = 0;
> 	return buf;
516c516
<     return U32ToDecStr(TempArray,a);
---
> 	return U32ToDecStr(TempArray,a);
520,531c520,531
<     if (digits < 1)
<         digits = 1;
<     else if (digits > 10)
<         digits = 10;
< 
<     for (int i = 1; i <= digits; ++i)
<     {
<         buf[digits - i] = '0' + (a % 10);
<         a /= 10;
<     }
<     buf[digits] = 0;
<     return buf;
---
> 	if (digits < 1)
> 		digits = 1;
> 	else if (digits > 10)
> 		digits = 10;
> 
> 	for (int i = 1; i <= digits; ++i)
> 	{
> 		buf[digits - i] = '0' + (a % 10);
> 		a /= 10;
> 	}
> 	buf[digits] = 0;
> 	return buf;
536,541c536,541
<     TempArray[0] = a/4096 > 9?'A'+a/4096-10:'0' + a/4096;
<     TempArray[1] = (a%4096)/256 > 9?'A'+(a%4096)/256 - 10:'0' + (a%4096)/256;
<     TempArray[2] = (a%256)/16 > 9?'A'+(a%256)/16 - 10:'0' + (a%256)/16;
<     TempArray[3] = a%16 > 9?'A'+(a%16) - 10:'0' + (a%16);
<     TempArray[4] = 0;
<     return TempArray;
---
> 	TempArray[0] = a/4096 > 9?'A'+a/4096-10:'0' + a/4096;
> 	TempArray[1] = (a%4096)/256 > 9?'A'+(a%4096)/256 - 10:'0' + (a%4096)/256;
> 	TempArray[2] = (a%256)/16 > 9?'A'+(a%256)/16 - 10:'0' + (a%256)/16;
> 	TempArray[3] = a%16 > 9?'A'+(a%16) - 10:'0' + (a%16);
> 	TempArray[4] = 0;
> 	return TempArray;
546,549c546,549
<     TempArray[0] = a/16 > 9?'A'+a/16 - 10:'0' + a/16;
<     TempArray[1] = a%16 > 9?'A'+(a%16) - 10:'0' + (a%16);
<     TempArray[2] = 0;
<     return TempArray;
---
> 	TempArray[0] = a/16 > 9?'A'+a/16 - 10:'0' + a/16;
> 	TempArray[1] = a%16 > 9?'A'+(a%16) - 10:'0' + (a%16);
> 	TempArray[2] = 0;
> 	return TempArray;
554,556c554,556
<     char tempbuf[16];
<     sprintf(tempbuf, "%d", n);
<     return tempbuf;
---
> 	char tempbuf[16];
> 	sprintf(tempbuf, "%d", n);
> 	return tempbuf;
562,570c562,570
<     std::string ret;
<     ret.reserve(50);
<     for(;;) 
<     {
<         int c = is->fgetc();
<         if(c == 0) break;
<         else ret += (char)c;
<     }
<     return ret;
---
> 	std::string ret;
> 	ret.reserve(50);
> 	for(;;) 
> 	{
> 		int c = is->fgetc();
> 		if(c == 0) break;
> 		else ret += (char)c;
> 	}
> 	return ret;
576,580c576,580
<     std::string answer = source;
<     std::string::size_type j = 0;
<     while ((j = answer.find(victim, j)) != std::string::npos )
<     answer.replace(j, victim.length(), replacement);
<     return answer;
---
> 	std::string answer = source;
> 	std::string::size_type j = 0;
> 	while ((j = answer.find(victim, j)) != std::string::npos )
> 	answer.replace(j, victim.length(), replacement);
> 	return answer;
753,757c753,757
<     try {
<         return UtfConverter::FromUtf8(str);
<     } catch(std::exception) {
<         return L"(failed UTF-8 conversion)";
<     }
---
> 	try {
> 		return UtfConverter::FromUtf8(str);
> 	} catch(std::exception) {
> 		return L"(failed UTF-8 conversion)";
> 	}
763c763
<     return UtfConverter::ToUtf8(str);
---
> 	return UtfConverter::ToUtf8(str);
769,779c769,779
<     char buf[1024];
<     strcpy(buf,input);
<     char* dot=strrchr(buf,'.');
<     if(!dot)
<         return "";
<     char ext [512];
<     strcpy(ext, dot+1);
<     int k, extlen=strlen(ext);
<     for(k=0;k<extlen;k++)
<         ext[k]=tolower(ext[k]);
<     return ext;
---
> 	char buf[1024];
> 	strcpy(buf,input);
> 	char* dot=strrchr(buf,'.');
> 	if(!dot)
> 		return "";
> 	char ext [512];
> 	strcpy(ext, dot+1);
> 	int k, extlen=strlen(ext);
> 	for(k=0;k<extlen;k++)
> 		ext[k]=tolower(ext[k]);
> 	return ext;
785c785
<     return filename.substr(0, filename.find_last_of("."));
---
> 	return filename.substr(0, filename.find_last_of("."));
791,792c791,792
<     int x = filename.find_last_of("\\") + 1;
<     return filename.substr(x, filename.length() - x);
---
> 	int x = filename.find_last_of("\\") + 1;
> 	return filename.substr(x, filename.length() - x);
